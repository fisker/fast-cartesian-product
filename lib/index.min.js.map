{"version":3,"file":"index.min.js","sources":["../src/length-accumulator.js","../src/index.js","../src/get-product-by-index.js"],"sourcesContent":["function lengthAccumulator(accumulator, {length}) {\n  return accumulator * length\n}\n\nexport default lengthAccumulator\n","import lengthAccumulator from './length-accumulator'\nimport getProductByIndex from './get-product-by-index'\n\nclass FastCartesianProduct {\n  constructor(sets) {\n    this.sets = sets\n  }\n\n  get(index) {\n    return getProductByIndex(this.sets, index)\n  }\n\n  [Symbol.iterator] () {\n    const {length} = this\n    const index = 0\n\n    return {\n      next() {\n        const done = index >= length\n        const value = this.get(index)\n\n        index += 1\n\n        return {\n          value,\n          done\n        }\n      }\n    }\n  }\n\n  get array() {\n    return Array.from(this)\n  }\n\n  get set() {\n    return new Set(this)\n  }\n\n  get length() {\n    return this.sets.reduce(lengthAccumulator, 1)\n  }\n}\n\nexport default FastCartesianProduct\n","\nfunction getProductByIndex(sets, index) {\n  let i = index\n  const {length} = sets\n  return sets.map(subSets => {\n    const {length} = subSets\n\t\tconst index = i % length;\n    i -= index\n    i /= length\n    return subSets[index]\n  })\n}\n\nexport default getProductByIndex"],"names":["lengthAccumulator","accumulator","length","sets","index","i","map","subSets","getProductByIndex","this","Symbol","iterator","next","done","value","get","Array","from","Set","reduce"],"mappings":"gXAAA,SAASA,EAAkBC,YAClBA,IADgCC,oCCI3BC,8GACLA,KAAOA,qDAGVC,UCPN,SAA2BD,EAAMC,OAC3BC,EAAID,SACSD,EAAVD,OACAC,EAAKG,IAAI,SAAAC,OACPL,EAAUK,EAAVL,OACHE,EAAQC,EAAIH,SAChBG,GAAKD,EACLC,GAAKH,EACEK,EAAQH,KDARI,CAAkBC,KAAKN,KAAMC,UAGrCM,OAAOC,8BACCT,EAAUO,KAAVP,OACDE,EAAQ,QAEP,CACLQ,oBACQC,EAAOT,GAASF,EAChBY,EAAQL,KAAKM,IAAIX,UAEvBA,kEAAS,GAEF,CACLU,MAAAA,EACAD,KAAAA,0CAOCG,MAAMC,KAAKR,yCAIX,IAAIS,IAAIT,4CAIRA,KAAKN,KAAKgB,OAAOnB,EAAmB"}